.MODEL SMALL
.STACK
.DATA
	String DB "TesZt SztRiNg", 0

.CODE
	MAIN PROC
		CALL clear_screen
		CALL write_char_without_space
		CALL sys_exit
	MAIN ENDP

	write_char_without_space PROC
		MOV AX, DGROUP 		; adatszegmens cimenek kinyerese
		MOV DS, AX 			; adatszegmens cimenek tarolasa DS-ben (hosszu tavu tarolas)
		LEA BX, String 		; creating the first pointer of the string constant

		next_nonspace_char:
			MOV DL, [BX] 	; a pointer adott cimen található érték (= karakter) kimentése DL-be  // a cimet folyamatosan növeljük BL incrementálásval
			OR DL, DL 		; DL reset 
			JZ stop 		; ha elértük az endbitet, akkor megallunk (konstans , 0) <-- a 0 az endbit // JZ = jump near if 0
			CMP DL, ' '		; beolvasott ertek osszehasonlitasa SPACE karakterrel
			JE skip_space	; ha SPACE-t olvastunk be, akkor azt kihagyjuk a kiiratasbol a skip_space subrutin segitsegevel

			CALL write_char	; ha nem SPACE-t olvastunk be, kiiratjuk

			INC BX			; loop counter increase (moving to the next char)
			JMP next_nonspace_char
		skip_space:
			INC BX			; incrementing loop counter so that we'll skip to the next character
			JMP next_nonspace_char
		stop:
			RET
	write_char_without_space ENDP

	write_char PROC ;A DL-ben levo karakter kiirasa a kepernyore
		PUSH AX ;AX mentese a verembe
		MOV AH, 2 ; AH-ba a kepernyore iras funkciokodja
		INT 21h ; Karakter kiirasa
		POP AX ;AX visszaallitasa
		RET ;Visszateres a hivo rutinba
	write_char ENDP

    clear_screen PROC
        xor AL,AL
        xor CX,CX
        MOV DH,49          
        MOV DL,79           
        MOV BH,7         
        MOV AH,6
        INT 10h          
        RET
    clear_screen ENDP

	sys_exit PROC
		MOV AH, 4CH ; system CALL: sys_exit
		INT 21H ; interrupt to perform the previous system CALL
	sys_exit ENDP

END main