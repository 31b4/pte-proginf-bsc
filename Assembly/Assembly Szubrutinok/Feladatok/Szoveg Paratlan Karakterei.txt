.MODEL SMALL;
.STACK
.DATA
	String DB "TesZt szTriNg", 0;

.CODE
	MAIN PROC
		CALL clear_screen
		CALL write_char_odd PROC
		CALL sys_exit
	MAIN ENDP


	write_char_odd PROC
		MOV AX, DGROUP 		; adatszegmens cimenek kinyerese
		MOV DS, AX 			; adatszegmens cimenek tarolasa DS-ben (hosszu tavu tarolas)
		LEA BX, String 		; creating the first pointer of the string constant

		next_odd_char:
			MOV DL, [BX] 	; a pointer adott cimen található érték (= karakter) kimentése DL-be  // a cimet folyamatosan növeljük BL incrementálásval
			OR DL, DL 		; DL reset 
			JZ stop 		; ha elértük az endbitet, akkor megallunk (konstans , 0) <-- a 0 az endbit // JZ = jump near if 0
			CALL write_char

			INC BX 			; this char is even, so it won't be printed out, but we'Ll check for the endbit
			MOV DL, [BX] 	
			OR DL, DL
			JZ stop

			INC BX			; this char is odd, so we go back to the subrutin's start and print it out
			JMP next_odd_char
		stop:
			RET
	write_char_odd ENDP

	write_char PROC ;A DL-ben levo karakter kiirasa a kepernyore
		PUSH AX ;AX mentese a verembe
		MOV AH, 2 ; AH-ba a kepernyore iras funkciokodja
		INT 21h ; Karakter kiirasa
		POP AX ;AX visszaallitasa
		RET ;Visszateres a hivo rutinba
	write_char ENDP

	cr_lf PROC
		PUSH DX ;DX mentese a verembe
		MOV DL, CR
		CALL write_char ;kurzor a sor elejere
		MOV DL, LF
		CALL write_char ;Kurzor egy sorral lejjebb
		POP DX ;DX visszaallitasa
		RET ;Visszateres a hivo rutinba
	cr_lf ENDP

    clear_screen PROC
        xor AL,AL
        xor CX,CX
        MOV DH,49           
        MOV DL,79           
        MOV BH,7         
        MOV AH,6
        INT 10h          
	RET
    clear_screen ENDP

	sys_exit PROC
		MOV AH, 4CH ; system CALL: sys_exit
		INT 21H ; interrupt to perform the previous system CALL
	sys_exit ENDP

END main